// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/fsufitch/testable-web-demo/app"
	"github.com/fsufitch/testable-web-demo/config"
	"github.com/fsufitch/testable-web-demo/db"
	"github.com/fsufitch/testable-web-demo/web"
	"github.com/google/wire"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeApplicationRunFunc() (app.ApplicationRunFunc, func(), error) {
	webPort, err := config.ProvideWebPortFromEnvironment()
	if err != nil {
		return nil, nil, err
	}
	defaultUptimeHandler := web.ProvideDefaultUptimeHandler()
	databaseString, err := config.ProvideDatabaseStringFromEnvironment()
	if err != nil {
		return nil, nil, err
	}
	preInitPostgresDBConn, cleanup, err := db.ProvidePreInitPostgresDBConn(databaseString)
	if err != nil {
		return nil, nil, err
	}
	postgresDBConn, err := db.ProvidePostgresDBConn(preInitPostgresDBConn)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	postgresCounterDAO := &db.PostgresCounterDAO{
		DB: postgresDBConn,
	}
	defaultCounterHandler := &web.DefaultCounterHandler{
		CounterDAO: postgresCounterDAO,
	}
	handlers := web.Handlers{
		Uptime:  defaultUptimeHandler,
		Counter: defaultCounterHandler,
	}
	router := web.ProvideDefaultRouter(handlers)
	serverRunFunc, cleanup2 := web.ProvideServerRunFunc(webPort, router)
	interruptChannel := app.ProvideInterruptChannel()
	applicationRunFunc := app.ProvideApplicationRunFunc(serverRunFunc, interruptChannel)
	return applicationRunFunc, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var DefaultProviderSet = wire.NewSet(app.ApplicationProviderSet, config.EnvironmentProviderSet, db.PostgresDBProviderSet, web.DefaultWebProviderSet)
